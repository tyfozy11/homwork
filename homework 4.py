from pprint import pprint

# task 1.
# написати програму, яка просить в користувача ввести через пробіл міста, в яких він був за минулі 10 років
# потім окремо запросити у користувача міста, куди він хоче поїхати внаступні 10 років
# вивести на екран повідомлення з текстом про те, що користувачу, мабуть, дуже сподобалося в містах, які він повторив в
# двох циклах вводу, а саме... (сформувати строку, використовуючи join)
# якщо повтору не було - вивести повідомлення, що користувач відкритий до чогось нового
# врахувати випадки, що користувач нічого не вводить не потрібно, в даному випадку вам явно зазначено,
# що ці перевірки не потрібні.
# не потрібно перевіряти введення цифр
# ми виходим із того, що користувач введе щось на зразок "Київ Тернопіль париЖ акапулько-80"
# В той же час врахуйте, що користувач може вводити дані в різних регістрах

# використати сети!!!

print( "Вітаю,введіть через пробіл міста, в яких, Ви, був за минулі 10 років, будь ласка.")
date_input = input("").title().split()
date_input = set(date_input)
print(date_input )
print( "Дякую, а тепер введіть міста, куди, Ви, хотіли б  поїхати внаступні 10 років ")
date_input2 =  input("").title().split()
date_input2 = set(date_input2)
print(date_input2)
if  date_input & date_input2 :
    print(','.join(date_input & date_input2), 'Вам мабуть, дуже сподобалося в містах, якщо Ви хочете повернутись.')
else :
     print('Ви відкритий до чогось нового!')

# task 2.
#дано код Морзе, що зберігається в словнику
# є стрічка, в якій слова розділені 2 пробілами, а букви в слові - одним пробілом
# написати програму по декодуванню даної (чи подібної) стрічки
# ПІДКАЗКА - при потребі можна створити симетричний словник, де ключами буде код Морзе, а значеннями - символи латиниці
# """
# MORSE_CODE_DICT = {
# 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
# 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
# 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
# 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
# '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-',
# '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'
# }
# string_to_decode1 = '.. .-.. .. -.- . .--. -.-- - .... --- -. ...-- .-.-.- .---- ----- '
# string_to_decode2 = '.. -.- -. --- .-- --..-- -.-- --- ..- -.-. .- -. -.. --- .. - '
MORSE_CODE_DICT = {
'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
'6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-',
'?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'
}
mydict_new=dict(zip(MORSE_CODE_DICT.values(),MORSE_CODE_DICT.keys()))
pprint(mydict_new)
string_to_decode1 = '..  .-.. .. -.- .  .--. -.-- - .... --- -.  ...-- .-.-.- .---- ----- '
string_to_decode2 = '..  -.- -. --- .-- --..--  -.-- --- ..-  -.-. .- -.  -.. ---  .. - '
pprint(string_to_decode1.split())


result_new = ""
for word in string_to_decode2.split("  "):
    for letter in word.split():
        result_new += mydict_new[letter]
    result_new += " "
print(result_new.rstrip(' '))

# task 3.

# ауважте, що значення, що зберігається в кожному елементі - теж словник, і доступ до вкладеного списку
# здійснюється за механізмом
# student[outer_dict_key][inner_dict_key]
#
# Є дані студентів (комбінація імені та прізвища унікальна), що зберігаються за допомогою словника
# 1 - програмно добавити одного студента, з заповненням усіх полів (вік - від 18 до 40, цілочисельне значення,
#     бал від 0 до 100 (інт чи флоат)
# 2 - створити і вивести на екран список студентів (імя та прізвище та середній бал), у яких середній бал більше 90
#     сам формат наповнення цього списку up to you
# 3 - визначити середній бал по групі
# 4 - при відсутності номеру телефону у студента записати номер деканату як значення за замовчуванням (номер на ваш вибір)
#
# не забувайте виводити інформаційні повідомлення щодо інформації, яку ви виводите

student = {
    'Іван Петров': {
        'Пошта': 'Ivan@gmail.com',
        'Вік': 21,
        'Номер телефону': '+380987771221',
        'Середній бал': 95.8
    },
    'Женя Курич': {
        'Пошта': 'Geka@gmail.com',
        'Вік': 22,
        'Номер телефону': None,
        'Середній бал': 64.5
    },
    'Маша Кера': {
        'Пошта': 'Masha@gmail.com',
        'Вік': 18,
        'Номер телефону': '+380986671221',
        'Середній бал': 80
    },
}
# програмно добавити одного студента, з заповненням усіх полів (вік - від 18 до 40, цілочисельне значення,
#     бал від 0 до 100 (інт чи флоат)


student['Сергій Єманов'] = {'Пошта': 'tifozy11@gmail.com',
        'Вік': 28,
        'Номер телефону': '+380991954575',
        'Середній бал': 90}
pprint(student)
# визначити середній бал по групі
group_average = []
for average in student:
        group_average.append(student[average].get('Середній бал'))
        if not student[average]['Середній бал']:
            student[average]['Середній бал'] = 70
print('Середній бал групи ---->', sum(group_average)/len(student))
# при відсутності номеру телефону у студента записати номер деканату як значення за замовчуванням (номер на ваш вибір)
for number in student:
    if not student[number]['Номер телефону']:
        student[number]['Номер телефону'] = '+380993546555'
pprint(student)

# створити і вивести на екран список студентів (імя та прізвище та середній бал), у яких середній бал більше 90
#     сам формат наповнення цього списку up to you

for favorite in student:
    if student[favorite]['Середній бал'] >= 90:
     print(favorite, student[favorite]['Середній бал'], end = (', '))




